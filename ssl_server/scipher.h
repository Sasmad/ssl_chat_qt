/**
 * @file scipher.h
 * @brief Заголовочный файл для утилит рекуррентного аффинного шифра.
 */

#ifndef CIPHER_UTILS_H
#define CIPHER_UTILS_H

#include <vector>
#include <string>
#include <tuple>

/**
 * @brief Вычисляет наибольший общий делитель двух целых чисел.
 * @param a Первое целое число.
 * @param b Второе целое число.
 * @return Наибольший общий делитель чисел a и b.
 */
int gcd(int a, int b);

/**
 * @brief Определяет, являются ли два целых числа взаимно простыми.
 * @param a Первое целое число.
 * @param m Второе целое число.
 * @return Истина, если числа a и m взаимно простые, ложь в противном случае.
 */
bool isCoprime(int a, int m);

/**
 * @brief Генерирует последовательность аналогичную последовательности Фибоначчи по модулю заданного числа, с возможностью выбора между умножением и сложением.
 * @param a Начальное значение последовательности.
 * @param b Второе значение последовательности.
 * @param l Длина генерируемой последовательности.
 * @param mod Модуль для вычислений в последовательности.
 * @param isMult Если истина, используется умножение, иначе сложение.
 * @return Вектор, содержащий сгенерированную последовательность.
 */
std::vector<int> fibMod(int a, int b, int l, int mod, bool isMult);

/**
 * @brief Вычисляет модульный обратный элемент числа по заданному модулю.
 * @param a Число, для которого нужно найти обратный элемент.
 * @param m Модуль.
 * @return Модульный обратный элемент числа a по модулю m, если он существует, -1 в противном случае.
 */
int modInverse(int a, int m);

/**
 * @brief Шифрует сообщение с использованием рекуррентного аффинного шифра.
 * @param message Текст сообщения для шифрования.
 * @param alpha1 Первый множитель для рекуррентной последовательности.
 * @param alpha2 Второй множитель для рекуррентной последовательности.
 * @param beta1 Первая добавочная константа для рекуррентной последовательности.
 * @param beta2 Вторая добавочная константа для рекуррентной последовательности.
 * @return Зашифрованное сообщение в виде строки.
 */
std::string RecAth(const std::string& message, int alpha1, int alpha2, int beta1, int beta2);

/**
 * @brief Расшифровывает сообщение, зашифрованное с помощью рекуррентного аффинного шифра.
 * @param encrypted Зашифрованное сообщение для расшифровки.
 * @param alpha1 Первый множитель для рекуррентной последовательности.
 * @param alpha2 Второй множитель для рекуррентной последовательности.
 * @param beta1 Первая добавочная константа для рекуррентной последовательности.
 * @param beta2 Вторая добавочная константа для рекуррентной последовательности.
 * @return Расшифрованное сообщение в виде строки.
 */
std::string DeRecAth(const std::string& encrypted, int alpha1, int alpha2, int beta1, int beta2);

#endif // CIPHER_UTILS_H
